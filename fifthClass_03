1. Storage Value 宏 
```rust
use frame_support::{decl_storage, storage};

decl_storage! {
    trait Store for Module<T: Trait> as Example {
        pub MyValue: u32;
    }
}

fn my_value<T: Trait>() -> u32 {
    MyValue::get()
}

fn set_my_value<T: Trait>(val: u32) {
    MyValue::put(val);
}
```
以上示例代码定义了一个 storage value 变量 `MyValue`，使用 `MyValue::get()` 能获取该存储的值，使用 `MyValue::put()` 能设置该存储的值。

2. `call` 宏
```rust
use frame_support::dispatch::DispatchResult;

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        #[weight = 0]
        pub fn some_function(origin) -> DispatchResult {
            ensure_signed(origin)?;

            let account = T::Lookup::unlookup(1); // 1 为调用者的账户 ID
            let value: u64 = 100;

            // 调用链上的 transfer 函数，将 100 个单位的资产转移给账户 1
            let res = call!(Self::transfer(account, value));
            ensure!(res.is_ok(), "Failed");

            Ok(())
        }

        #[weight = 0]
        pub fn transfer(dest: T::AccountId, value: u64) -> DispatchResult {
            // 实现转账逻辑
            Ok(())
        }
    }
}
```

以上示例代码中，定义了两个函数 `some_function` 和 `transfer`，
其中 `some_function` 函数通过 `call!(Self::transfer(account, value))` 调用 `transfer` 函数来执行转账操作。


3`event` 宏用于定义链上事件

```rust
use frame_support::{decl_module, decl_event, dispatch::DispatchResult};
use frame_system::{self as system, ensure_signed};

#[derive(Debug, Decode, PartialEq, Eq)]
pub enum Event<T> where T: frame_system::Trait {
    /// 新增账户
    AccountAdded(T::AccountId),
}

decl_event!(
    pub enum MyEvents<T> where AccountId = <T as frame_system::Trait>::AccountId {
        /// 账户发生转移
        TransferOccurred(AccountId, AccountId, u64),
        /// 发生错误
        ErrorOccurred,
    }
);

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        #[weight = 0]
        pub fn transfer(origin, dest: T::AccountId, value: u64) -> DispatchResult {
            let sender = ensure_signed(origin)?;
            let balance = T::Currency::free_balance(&sender);
            ensure!(balance >= value.into(), "Insufficient balance.");

            // 转移资产
            T::Currency::transfer(&sender, &dest, value.into())?;

            // 发出转账事件
            Self::deposit_event(RawEvent::TransferOccurred(sender, dest, value));

            Ok(())
        }
    }
}
```

以上示例代码中，使用 `decl_event!` 宏定义了 `MyEvents` 类型的链上事件，包含了两个事件类型 `TransferOccurred` 和 `ErrorOccurred`。
另外，在 `Module` 中的 `transfer` 函数中使用了 `Self::deposit_event(RawEvent::TransferOccurred(sender, dest, value))` 发出了一个 `TransferOccurred` 事件。
